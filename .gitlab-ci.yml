stages:
    - version
    - build
variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  CI_IMAGE: $CI_REGISTRY/tygercaddy/tygercaddy
  PLATFORM: linux/amd64,linux/arm64,linux/arm/v7

semantic_release:
  stage: version
  image: smartive/semantic-release-image
  only: 
    - branches
  artifacts:
    paths:
    - VERSION.txt
    - version.js
  script:
    - npx semantic-release
    - cat VERSION.txt
    - ls -ls
    - rm -R frontend/src/version.js
    - echo "export const version = '$(cat VERSION.txt)';" > version.js
    - cat version.js

build-docker:
    stage: build
    only:
      - dev
      - test
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker buildx create --driver docker-container --use
      - docker buildx inspect --bootstrap

    script:
      - ls
      - cat version.js
      - cat frontend/src/version.js
      - rm frontend/src/version.js
      - cp version.js frontend/src/version.js
      - cat frontend/src/version.js
      - update-binfmts --enable
      - >
        if [ "$CI_COMMIT_BRANCH" == "dev" ]; then
          export BRANCH_VERSION="dev-latest"
        else
          export BRANCH_VERSION="test-latest"
        fi
      - docker buildx build --push -t "$CI_IMAGE:$(cat VERSION.txt)" -t "$CI_IMAGE:$BRANCH_VERSION" 
        --platform "linux/amd64"
        --cache-from $CI_IMAGE:$BRANCH_VERSION 
        --build-arg BUILDKIT_INLINE_CACHE=1 .

build-docker-release:
    stage: build
    only:
      - master
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker buildx create --driver docker-container --use
      - docker buildx inspect --bootstrap
    script:
      - ls
      - cat version.js
      - cat frontend/src/version.js
      - rm frontend/src/version.js
      - cp version.js frontend/src/version.js
      - cat frontend/src/version.js
      - update-binfmts --enable
      - docker buildx build --push -t "$CI_IMAGE:$(cat VERSION.txt)" -t "$CI_IMAGE:latest"
        --platform "linux/amd64"
        --cache-from $CI_IMAGE:$(cat VERSION.txt) 
        --build-arg BUILDKIT_INLINE_CACHE=1 .

build-docker-ARM64:
    image: jonoh/docker-buildx-qemu
    stage: build
    services:
      - docker:19.03.0-dind
    only:
      - master
    before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker buildx create --driver docker-container --use
      - docker buildx inspect --bootstrap
    script:
      - ls
      - cat version.js
      - cat frontend/src/version.js
      - rm frontend/src/version.js
      - cp version.js frontend/src/version.js
      - cat frontend/src/version.js
      - update-binfmts --enable
      - docker buildx build -f DockerfileARM64 --push -t "$CI_IMAGE:ARM64-$(cat VERSION.txt)" -t "$CI_IMAGE:ARM64-latest"
        --platform "linux/arm64"
        --cache-from $CI_IMAGE:ARM64-$(cat VERSION.txt) 
        --build-arg BUILDKIT_INLINE_CACHE=1 .
