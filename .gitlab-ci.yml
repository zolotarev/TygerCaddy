stages:
  - Fetch Version
  - Build Dev Image
  - Push Dev Image
  - Build Test Image
  - Push Test Image
  - Build Release Image
  - Push Release Image
  - Release

variables:
  CONTAINER_DEV_IMAGE: $CI_REGISTRY/tygercaddy/tygercaddy:dev
  CONTAINER_TEST_IMAGE: $CI_REGISTRY/tygercaddy/tygercaddy:test
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY/tygercaddy/tygercaddy:latest

fetch-semantic-version:
  # Requires Node >= 10.13 version
  image: node:13
  stage: Fetch Version
  only:
    refs:
    - master
    - test
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - npm install @semantic-release/gitlab @semantic-release/exec
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
    - VERSION.txt
generate-non-semantic-version:
  stage: Fetch Version
  except:
    refs:
    - master
    - test
    - /^(([0-9]+)\.)?([0-9]+)\.x/ # This matches maintenance branches
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ # This matches pre-releases
  script:
    - echo build-$CI_PIPELINE_ID > VERSION.txt
  artifacts:
    paths:
    - VERSION.txt

docker dev build:
  stage: Build Dev Image
  rules: 
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DOCKER_CLI_EXPERIMENTAL=enabled   
    - export CGO_ENABLED=0
    - docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
    - cat /proc/sys/fs/binfmt_misc/qemu-aarch64
    - docker buildx use mybuilder
    - docker buildx inspect --bootstrap
  script:
    - echo "Version is $(cat VERSION.txt)"  
    - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $CONTAINER_DEV_IMAGE -t tygercaddy/tygercaddy:dev .

docker dev push:
  stage: Push Dev Image
  rules: 
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:  
    - docker push $CI_REGISTRY/tygercaddy/tygercaddy:dev

docker test build:
  stage: Build Test Image
  rules: 
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: always
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DOCKER_CLI_EXPERIMENTAL=enabled   
    - export CGO_ENABLED=0
    - docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
    - cat /proc/sys/fs/binfmt_misc/qemu-aarch64
    - docker buildx use mybuilder
    - docker buildx inspect --bootstrap

  script:  
    - echo "Version is $(cat VERSION.txt)"  
    - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $CONTAINER_TEST_IMAGE -t tygercaddy/tygercaddy:test .

docker test push:
  stage: Push Test Image
  rules: 
    - if: $CI_COMMIT_BRANCH == "test"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: always
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:  
    - docker push $CI_REGISTRY/tygercaddy/tygercaddy:test

docker release build:
  stage: Build Release Image
  rules: 
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
      when: always
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DOCKER_CLI_EXPERIMENTAL=enabled   
    - export CGO_ENABLED=0
    - docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
    - cat /proc/sys/fs/binfmt_misc/qemu-aarch64
    - docker buildx use mybuilder
    - docker buildx inspect --bootstrap
  script:
    - echo "Version is $(cat VERSION.txt)"    
    - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $CONTAINER_RELEASE_IMAGE -t tygercaddy/tygercaddy:latest .

docker release push:
  stage: Push Release Image
  rules: 
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
      when: always
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:  
    - docker push $CI_REGISTRY/tygercaddy/tygercaddy:latest

release:
  image: node:13
  stage: release
  only:
    refs:
    - master
    - test
    # This matches maintenance branches
    - /^(([0-9]+)\.)?([0-9]+)\.x/
    # This matches pre-releases
    - /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/ 
  script:
    - npm install @semantic-release/gitlab
    - npx semantic-release